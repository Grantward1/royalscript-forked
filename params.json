{
  "name": "Royalscript",
  "tagline": "A functional programming language designed for the web",
  "body": "#RoyalScript\r\n\r\n*A functional programming language for the web that's Royal!*\r\n\r\n##Intro\r\n\r\nRoyalScript is a special functional programming language that transcompiles to compressed JavaScript. It's purpose is to build on the fundamentals of functional programming by adding in extendable lists, mutable data, structs, loops, and much more. You can make functions with recursion, looping, or just use a lambda. It even has a type system!\r\n\r\nRoyalScript also emphasizes the nature of simplicity, the entire language is all functions, aside from the comments. \r\n\r\n##Installation and Setup\r\n\r\nTo install `RoyalScript`, you can use npm by typing the command:\r\n\r\n```\r\n$ npm install -g pike\r\n```\r\nRoyalScript, when run natively uses `.royal` files. To compile a RoyalScrpt file to javascript, use\r\n\r\n```\r\nroyalscript -j path/to/royalscriptfile\r\n```\r\nThis will output the transcompiled, compressed javascript in your terminal. To compile and run a royalscript file, you can use\r\n\r\n```\r\nroyalscript -e path/to/royalscriptfile\r\n```\r\n\r\n##Quick Start \r\n\r\nYou can use this small interpreter below to try `RoyalScript` out.\r\n\r\n####Syntax\r\n\r\nIn RoyalScript, all statements abide by a concise function syntax as follows\r\n\r\n```\r\n<FUNCTION>(<ARGUMENT 1>, <ARGUMENT 2>....)\r\n\r\nnested functions:\r\n\r\n<FUNCTION 1>(<FUNCTION 2>(<ARGUEMNT 1>), <ARGUMENT 1>....)\r\n\r\nseries of functions:\r\n\r\n<FUNCTION>(<ARGUMENT 1>, <ARGUMENT 2>...), <FUNCTION>()\r\n```\r\n\r\nSo statements or programs in Oblivion",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}